### output_path = "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/"
### database_dir = "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions"
### genome = "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt"
final_values = list()
indexes = list()
file = read.csv(GPSmatch_output)
for (i in 1:5){
#for each of the top hit files in folder_dir calculate original input file Jaccard index
hitfile = paste(database_dir,file[i,2],sep = "/")
##generates, A and B... then A' B
real_jaccard = jaccard_nt(bed1, hitfile)
num_overlap = real_jaccard[1]
num1=real_jaccard[2]
num2=real_jaccard[3]
#jaccard index
num_total = num1 + num2 - num_overlap
jaccard_id = num_overlap/num_total
#percentage --- ANB/A and ANB/B
#ANB/A
A_similarity = (num_overlap)/num1
B_similarity = (num_overlap)/num2
#Summary
indexes[[i]] = c(bedfile = as.character(file[i,2]),jaccard_index = jaccard_id,percentage_A = A_similarity,percentage_B=B_similarity)
#generate background files from query:
background_dir = paste(database_dir,"background",sep="_")
dir.create(background_dir)
print(paste("generating background files for", file[i,2]))
background_list = list()
for (j in 1:(n)){
background <- fread(cmd = paste("bedtools shuffle -i", bed1, "-g", genome))
write.table(background, paste(background_dir,"/background_file",j,".txt",sep = ""),sep="\t",row.names=F, col.names = F, quote = F)
}
print("finished generating background files")
######## Calculate background jaccard
background_n = list.files(background_dir)
background_jaccard = list()
for (j in 1:length(background_n)){
query_background = paste(background_dir,background_n[j],sep="/")
jaccard_list = jaccard_nt(query_background,hitfile)
num_overlap = jaccard_list[1]
num1=jaccard_list[2]
num2=jaccard_list[3]
#jaccard index
num_total = num1 + num2 - num_overlap
jaccard_id = num_overlap/num_total
background_jaccard[[j]] = c(bedfile = as.character(file[i,2]),jaccard_index = jaccard_id)
}
jaccard_df = as.data.frame(do.call(rbind,background_jaccard))
bed = as.numeric(as.character(jaccard_df[,2]))   ## jacard scores of shuffled background
#find the p-value
num = as.numeric(as.character(match(as.numeric(as.character(indexes[[i]][2])),sort(c(bed,as.numeric(as.character(indexes[[i]][2]))),decreasing=T))))
value = num/(n+1)
#finding the pi-score = mean ratio * (-log10(p-value))
if (mean(bed) == 0){
piscore = (as.numeric(as.character(indexes[[i]][2])))/(0.000001) * (-log(value))
} else{
piscore = (as.numeric(as.character(indexes[[i]][2])))/(mean(bed)) * (-log(value))
}
final_values[[i]] = c(bedfile = as.character(file[i,2]),jaccard_index = as.numeric(as.character(indexes[[i]][2])),pi_score = piscore, p_value = value, percentage_A = as.numeric(as.character(indexes[[i]][3])), percentage_B = as.numeric(as.character(indexes[[i]][4])),summary(bed))
unlink(background_dir, recursive = TRUE)
}
values_df = as.data.frame(do.call(rbind,final_values))
values_df = values_df[order(as.numeric(as.character(values_df$jaccard_index)),decreasing = T),]
write.csv(values_df,paste(output_path,"/",gsub("^.*/", "", bed1),"_jaccard_pval.csv",sep=""))
}
rankBedSimilarity(10, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/ctrl_Abcam_peaks.bed", "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/ctrl_Abcam_peaks.bed_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/")
for (i in 2:length(file_list)){
#filename = paste("/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.99_merge/",file_list[i], sep = "")
filename = paste("/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/",file_list[i], sep = "")
file = str_split_fixed(filename, "/", 8)[8]
#Shuffle_filename = paste("/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.1/Shuffled_", file, sep = "")
print (filename)
GPSmatch_nt(filename, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result")
}
rankBedSimilarity(10, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/GSM1645711_J1_DF_vsInput_broad_q05_noLambda_peaks.broadPeak", "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/GSM1645711_J1_DF_vsInput_broad_q05_noLambda_peaks.broadPeak_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/")
genome
bed1 = "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/GSM1645711_J1_DF_vsInput_broad_q05_noLambda_peaks.broadPeak"
GPSmatch_output = "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/GSM1645711_J1_DF_vsInput_broad_q05_noLambda_peaks.broadPeak_jaccard_nt.csv"
output_path
final_values = list()
indexes = list()
file = read.csv(GPSmatch_output)
i = 1
#for each of the top hit files in folder_dir calculate original input file Jaccard index
hitfile = paste(database_dir,file[i,2],sep = "/")
##generates, A and B... then A' B
real_jaccard = jaccard_nt(bed1, hitfile)
num_overlap = real_jaccard[1]
num1=real_jaccard[2]
num2=real_jaccard[3]
#jaccard index
num_total = num1 + num2 - num_overlap
jaccard_id = num_overlap/num_total
#percentage --- ANB/A and ANB/B
#ANB/A
A_similarity = (num_overlap)/num1
B_similarity = (num_overlap)/num2
#Summary
indexes[[i]] = c(bedfile = as.character(file[i,2]),jaccard_index = jaccard_id,percentage_A = A_similarity,percentage_B=B_similarity)
indexes[[i]]
#generate background files from query:
background_dir = paste(database_dir,"background",sep="_")
dir.create(background_dir)
print(paste("generating background files for", file[i,2]))
background_list = list()
for (j in 1:(n)){
background <- fread(cmd = paste("bedtools shuffle -i", bed1, "-g", genome))
write.table(background, paste(background_dir,"/background_file",j,".txt",sep = ""),sep="\t",row.names=F, col.names = F, quote = F)
}
print("finished generating background files")
######## Calculate background jaccard
background_n = list.files(background_dir)
background_jaccard = list()
for (j in 1:length(background_n)){
query_background = paste(background_dir,background_n[j],sep="/")
jaccard_list = jaccard_nt(query_background,hitfile)
num_overlap = jaccard_list[1]
num1=jaccard_list[2]
num2=jaccard_list[3]
#jaccard index
num_total = num1 + num2 - num_overlap
jaccard_id = num_overlap/num_total
background_jaccard[[j]] = c(bedfile = as.character(file[i,2]),jaccard_index = jaccard_id)
}
jaccard_df = as.data.frame(do.call(rbind,background_jaccard))
bed = as.numeric(as.character(jaccard_df[,2]))   ## jacard scores of shuffled background
#find the p-value
num = as.numeric(as.character(match(as.numeric(as.character(indexes[[i]][2])),sort(c(bed,as.numeric(as.character(indexes[[i]][2]))),decreasing=T))))
value = num/(n+1)
value
num
n
#finding the pi-score = mean ratio * (-log10(p-value))
if (mean(bed) == 0){
piscore = (as.numeric(as.character(indexes[[i]][2])))/(0.000001) * (-log(value))
} else{
piscore = (as.numeric(as.character(indexes[[i]][2])))/(mean(bed)) * (-log(value))
}
piscore
n = 10
final_values = list()
indexes = list()
file = read.csv(GPSmatch_output)
for (i in 1:5){
#for each of the top hit files in folder_dir calculate original input file Jaccard index
hitfile = paste(database_dir,file[i,2],sep = "/")
##generates, A and B... then A' B
real_jaccard = jaccard_nt(bed1, hitfile)
num_overlap = real_jaccard[1]
num1=real_jaccard[2]
num2=real_jaccard[3]
#jaccard index
num_total = num1 + num2 - num_overlap
jaccard_id = num_overlap/num_total
#percentage --- ANB/A and ANB/B
#ANB/A
A_similarity = (num_overlap)/num1
B_similarity = (num_overlap)/num2
#Summary
indexes[[i]] = c(bedfile = as.character(file[i,2]),jaccard_index = jaccard_id,percentage_A = A_similarity,percentage_B=B_similarity)
#generate background files from query:
background_dir = paste(database_dir,"background",sep="_")
dir.create(background_dir)
print(paste("generating background files for", file[i,2]))
background_list = list()
for (j in 1:(n)){
background <- fread(cmd = paste("bedtools shuffle -i", bed1, "-g", genome))
write.table(background, paste(background_dir,"/background_file",j,".txt",sep = ""),sep="\t",row.names=F, col.names = F, quote = F)
}
print("finished generating background files")
######## Calculate background jaccard
background_n = list.files(background_dir)
background_jaccard = list()
for (j in 1:length(background_n)){
query_background = paste(background_dir,background_n[j],sep="/")
jaccard_list = jaccard_nt(query_background,hitfile)
num_overlap = jaccard_list[1]
num1=jaccard_list[2]
num2=jaccard_list[3]
#jaccard index
num_total = num1 + num2 - num_overlap
jaccard_id = num_overlap/num_total
background_jaccard[[j]] = c(bedfile = as.character(file[i,2]),jaccard_index = jaccard_id)
}
jaccard_df = as.data.frame(do.call(rbind,background_jaccard))
bed = as.numeric(as.character(jaccard_df[,2]))   ## jacard scores of shuffled background
#find the p-value
num = as.numeric(as.character(match(as.numeric(as.character(indexes[[i]][2])),sort(c(bed,as.numeric(as.character(indexes[[i]][2]))),decreasing=T))))
value = num/(n+1)
#finding the pi-score = mean ratio * (-log10(p-value))
if (mean(bed) == 0){
piscore = (as.numeric(as.character(indexes[[i]][2])))/(0.000001) * (-log(value))
} else{
piscore = (as.numeric(as.character(indexes[[i]][2])))/(mean(bed)) * (-log(value))
}
final_values[[i]] = c(bedfile = as.character(file[i,2]),jaccard_index = as.numeric(as.character(indexes[[i]][2])),pi_score = piscore, p_value = value, percentage_A = as.numeric(as.character(indexes[[i]][3])), percentage_B = as.numeric(as.character(indexes[[i]][4])),summary(bed))
unlink(background_dir, recursive = TRUE)
}
i = 1
final_values = list()
indexes = list()
file = read.csv(GPSmatch_output)
#for each of the top hit files in folder_dir calculate original input file Jaccard index
hitfile = paste(database_dir,file[i,2],sep = "/")
##generates, A and B... then A' B
real_jaccard = jaccard_nt(bed1, hitfile)
num_overlap = real_jaccard[1]
num1=real_jaccard[2]
num2=real_jaccard[3]
#jaccard index
num_total = num1 + num2 - num_overlap
jaccard_id = num_overlap/num_total
#percentage --- ANB/A and ANB/B
#ANB/A
A_similarity = (num_overlap)/num1
B_similarity = (num_overlap)/num2
#Summary
indexes[[i]] = c(bedfile = as.character(file[i,2]),jaccard_index = jaccard_id,percentage_A = A_similarity,percentage_B=B_similarity)
#generate background files from query:
background_dir = paste(database_dir,"background",sep="_")
dir.create(background_dir)
print(paste("generating background files for", file[i,2]))
background_list = list()
for (j in 1:(n)){
background <- fread(cmd = paste("bedtools shuffle -i", bed1, "-g", genome))
write.table(background, paste(background_dir,"/background_file",j,".txt",sep = ""),sep="\t",row.names=F, col.names = F, quote = F)
}
print("finished generating background files")
######## Calculate background jaccard
background_n = list.files(background_dir)
background_jaccard = list()
for (j in 1:length(background_n)){
query_background = paste(background_dir,background_n[j],sep="/")
jaccard_list = jaccard_nt(query_background,hitfile)
num_overlap = jaccard_list[1]
num1=jaccard_list[2]
num2=jaccard_list[3]
#jaccard index
num_total = num1 + num2 - num_overlap
jaccard_id = num_overlap/num_total
background_jaccard[[j]] = c(bedfile = as.character(file[i,2]),jaccard_index = jaccard_id)
}
jaccard_df = as.data.frame(do.call(rbind,background_jaccard))
bed = as.numeric(as.character(jaccard_df[,2]))   ## jacard scores of shuffled background
#find the p-value
num = as.numeric(as.character(match(as.numeric(as.character(indexes[[i]][2])),sort(c(bed,as.numeric(as.character(indexes[[i]][2]))),decreasing=T))))
value = num/(n+1)
value
#finding the pi-score = mean ratio * (-log10(p-value))
if (mean(bed) == 0){
piscore = (as.numeric(as.character(indexes[[i]][2])))/(0.000001) * (-log(value))
} else{
piscore = (as.numeric(as.character(indexes[[i]][2])))/(mean(bed)) * (-log(value))
}
piscore
as.numeric(as.character(indexes[[i]][2])))
as.numeric(as.character(indexes[[i]][2]))
bed
rankBedSimilarity(100, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/GSM1645711_J1_DF_vsInput_broad_q05_noLambda_peaks.broadPeak", "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/GSM1645711_J1_DF_vsInput_broad_q05_noLambda_peaks.broadPeak_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/")
rankBedSimilarity = function(n,genome,bed1,GPSmatch_output,database_dir, output_path){
## For test purpose  GPSmatch_output = "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ControlFiles_Result_0.5_merge/MCM1+SFF_transfac.csv_jaccard_nt.csv"
### bed1 = "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.5_merge/MCM1+SFF_transfac.csv"
### output_path = "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/"
### database_dir = "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions"
### genome = "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt"
final_values = list()
indexes = list()
file = read.csv(GPSmatch_output)
for (i in 1:10){
#for each of the top hit files in folder_dir calculate original input file Jaccard index
hitfile = paste(database_dir,file[i,2],sep = "/")
##generates, A and B... then A' B
real_jaccard = jaccard_nt(bed1, hitfile)
num_overlap = real_jaccard[1]
num1=real_jaccard[2]
num2=real_jaccard[3]
#jaccard index
num_total = num1 + num2 - num_overlap
jaccard_id = num_overlap/num_total
#percentage --- ANB/A and ANB/B
#ANB/A
A_similarity = (num_overlap)/num1
B_similarity = (num_overlap)/num2
#Summary
indexes[[i]] = c(bedfile = as.character(file[i,2]),jaccard_index = jaccard_id,percentage_A = A_similarity,percentage_B=B_similarity)
#generate background files from query:
background_dir = paste(database_dir,"background",sep="_")
dir.create(background_dir)
print(paste("generating background files for", file[i,2]))
background_list = list()
for (j in 1:(n)){
background <- fread(cmd = paste("bedtools shuffle -i", bed1, "-g", genome))
write.table(background, paste(background_dir,"/background_file",j,".txt",sep = ""),sep="\t",row.names=F, col.names = F, quote = F)
}
print("finished generating background files")
######## Calculate background jaccard
background_n = list.files(background_dir)
background_jaccard = list()
for (j in 1:length(background_n)){
query_background = paste(background_dir,background_n[j],sep="/")
jaccard_list = jaccard_nt(query_background,hitfile)
num_overlap = jaccard_list[1]
num1=jaccard_list[2]
num2=jaccard_list[3]
#jaccard index
num_total = num1 + num2 - num_overlap
jaccard_id = num_overlap/num_total
background_jaccard[[j]] = c(bedfile = as.character(file[i,2]),jaccard_index = jaccard_id)
}
jaccard_df = as.data.frame(do.call(rbind,background_jaccard))
bed = as.numeric(as.character(jaccard_df[,2]))   ## jacard scores of shuffled background
#find the p-value
num = as.numeric(as.character(match(as.numeric(as.character(indexes[[i]][2])),sort(c(bed,as.numeric(as.character(indexes[[i]][2]))),decreasing=T))))
value = num/(n+1)
#finding the pi-score = mean ratio * (-log10(p-value))
if (mean(bed) == 0){
piscore = (as.numeric(as.character(indexes[[i]][2])))/(0.000001) * (-log(value))
} else{
piscore = (as.numeric(as.character(indexes[[i]][2])))/(mean(bed)) * (-log(value))
}
final_values[[i]] = c(bedfile = as.character(file[i,2]),jaccard_index = as.numeric(as.character(indexes[[i]][2])),pi_score = piscore, p_value = value, percentage_A = as.numeric(as.character(indexes[[i]][3])), percentage_B = as.numeric(as.character(indexes[[i]][4])),summary(bed))
unlink(background_dir, recursive = TRUE)
}
values_df = as.data.frame(do.call(rbind,final_values))
values_df = values_df[order(as.numeric(as.character(values_df$jaccard_index)),decreasing = T),]
write.csv(values_df,paste(output_path,"/",gsub("^.*/", "", bed1),"_jaccard_pval.csv",sep=""))
}
rankBedSimilarity(100, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/GSM1645711_J1_DF_vsInput_broad_q05_noLambda_peaks.broadPeak", "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/GSM1645711_J1_DF_vsInput_broad_q05_noLambda_peaks.broadPeak_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/")
rankBedSimilarity(10, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/GSM1645715_p63_ChIP_C_total_peaks.bed", "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/GSM1645715_p63_ChIP_C_total_peaks.bed_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/")
rankBedSimilarity(100, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/GSM1645715_p63_ChIP_C_total_peaks.bed", "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/GSM1645715_p63_ChIP_C_total_peaks.bed_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/")
### Computing
dffinal = c(rep(1:6))
file_list2 <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_0.95_merge")
for (i in 1:length(file_list2)){
filename = paste("/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_0.95_merge/",file_list2[i], sep = "")
df <- read.csv(file=filename,nrows=1)
df$OrginalFile = file_list2[i]
dffinal= rbind(dffinal, df)
}
write.table(dffinal, file = "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/Summary_Control0.95_nt_012312021.csv")
write.table(dffinal, file = "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/Summary_Control0.95_nt_merge_012312021.csv")
dffinal
file_list2
### Computing
dffinal = c(rep(1:6))
file_list2 <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_0.95_merge")
file_list2
file_list2 <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_0.95_merge")
file_list2
### Computing
dffinal = c(rep(1:6))
file_list2 <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_0.95_merge")
file_list2
file_list <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example")
file_list2 <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_0.99_merge")
file_list2
### Computing
dffinal = c(rep(1:6))
#file_list2 <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_nt")
#file_list2 <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Countoverlap_Result")
file_list2 <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_0.5_merge")
file_list2
### Computing
dffinal = c(rep(1:6))
#file_list2 <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_nt")
#file_list2 <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Countoverlap_Result")
file_list2 <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_0.5_merge")
for (i in 1:length(file_list2)){
filename = paste("/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_0.5_merge/",file_list2[i], sep = "")
df <- read.csv(file=filename,nrows=1)
df$OrginalFile = file_list2[i]
dffinal= rbind(dffinal, df)
}
write.table(dffinal, file = "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/Summary_Control0.5_nt_merge_012312021.csv")
rankBedSimilarity(100, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/ctrl_rbmab_peaks.bed", "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/ctrl_rbmab_peaks.bed_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/")
rankBedSimilarity(100, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/GSM1645719_p300_CC_total_peaks.bed", "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/GSM1645719_p300_CC_total_peaks.bed_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/")
rankBedSimilarity(100, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/GSM1645711_J1_DF_vsInput_broad_q05_noLambda_peaks.broadPeak", "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/GSM1645711_J1_DF_vsInput_broad_q05_noLambda_peaks.broadPeak_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/")
library(GPSmatch)
require(readxl)
require(tidyverse)
require(data.table)
#file_list <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.1")
#file_list <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.1_batch3")
file_list <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.95_merge")
file_list
for (i in 30:length(file_list)){
#for (i in 14:29){
filename = paste("/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.95_merge/",file_list[i], sep = "")
file = str_split_fixed(filename, "/", 8)[8]
#Shuffle_filename = paste("/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.1/Shuffled_", file, sep = "")
print (filename)
GPSmatch_nt(filename, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ControlFiles_Result_0.95_merge")
}
#for (i in 30:length(file_list)){
for (i in 14:29){
filename = paste("/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.95_merge/",file_list[i], sep = "")
file = str_split_fixed(filename, "/", 8)[8]
#Shuffle_filename = paste("/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.1/Shuffled_", file, sep = "")
print (filename)
GPSmatch_nt(filename, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ControlFiles_Result_0.95_merge")
}
### Computing
dffinal = c(rep(1:6))
file_list2 <- list.files(path="/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_0.95_merge")
for (i in 1:length(file_list2)){
filename = paste("/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_Result_0.95_merge/",file_list2[i], sep = "")
df <- read.csv(file=filename,nrows=1)
df$OrginalFile = file_list2[i]
dffinal= rbind(dffinal, df)
}
write.table(dffinal, file = "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/Summary_Control0.95_nt_012312021.csv")
#rankBedSimilarity(100, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.5_merge/MCM1+SFF_transfac.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ControlFiles_Result_0.5_merge/MCM1+SFF_transfac.csv_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/dir/output_path")
rankBedSimilarity(100, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/ctrl_Abcam_peaks.bed", "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/ctrl_Abcam_peaks.bed_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/")
rankBedSimilarity = function(n,genome,bed1,GPSmatch_output,database_dir, output_path){
## For test purpose  GPSmatch_output = "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ControlFiles_Result_0.5_merge/MCM1+SFF_transfac.csv_jaccard_nt.csv"
### bed1 = "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.5_merge/MCM1+SFF_transfac.csv"
### output_path = "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/"
### database_dir = "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions"
### genome = "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt"
final_values = list()
indexes = list()
file = read.csv(GPSmatch_output)
for (i in 1:10){
#for each of the top hit files in folder_dir calculate original input file Jaccard index
hitfile = paste(database_dir,file[i,2],sep = "/")
##generates, A and B... then A' B
real_jaccard = jaccard_nt(bed1, hitfile)
num_overlap = real_jaccard[1]
num1=real_jaccard[2]
num2=real_jaccard[3]
#jaccard index
num_total = num1 + num2 - num_overlap
jaccard_id = num_overlap/num_total
#percentage --- ANB/A and ANB/B
#ANB/A
A_similarity = (num_overlap)/num1
B_similarity = (num_overlap)/num2
#Summary
indexes[[i]] = c(bedfile = as.character(file[i,2]),jaccard_index = jaccard_id,percentage_A = A_similarity,percentage_B=B_similarity)
#generate background files from query:
background_dir = paste(database_dir,"background",sep="_")
dir.create(background_dir)
print(paste("generating background files for", file[i,2]))
background_list = list()
for (j in 1:(n)){
background <- fread(cmd = paste("bedtools shuffle -i", bed1, "-g", genome))
write.table(background, paste(background_dir,"/background_file",j,".txt",sep = ""),sep="\t",row.names=F, col.names = F, quote = F)
}
print("finished generating background files")
######## Calculate background jaccard
background_n = list.files(background_dir)
background_jaccard = list()
for (j in 1:length(background_n)){
query_background = paste(background_dir,background_n[j],sep="/")
jaccard_list = jaccard_nt(query_background,hitfile)
num_overlap = jaccard_list[1]
num1=jaccard_list[2]
num2=jaccard_list[3]
#jaccard index
num_total = num1 + num2 - num_overlap
jaccard_id = num_overlap/num_total
background_jaccard[[j]] = c(bedfile = as.character(file[i,2]),jaccard_index = jaccard_id)
}
jaccard_df = as.data.frame(do.call(rbind,background_jaccard))
bed = as.numeric(as.character(jaccard_df[,2]))   ## jacard scores of shuffled background
#find the p-value
num = as.numeric(as.character(match(as.numeric(as.character(indexes[[i]][2])),sort(c(bed,as.numeric(as.character(indexes[[i]][2]))),decreasing=T))))
value = num/(n+1)
#finding the pi-score = mean ratio * (-log10(p-value))
if (mean(bed) == 0){
piscore = (as.numeric(as.character(indexes[[i]][2])))/(0.000001) * (-log(value))
} else{
piscore = (as.numeric(as.character(indexes[[i]][2])))/(mean(bed)) * (-log(value))
}
final_values[[i]] = c(bedfile = as.character(file[i,2]),jaccard_index = as.numeric(as.character(indexes[[i]][2])),pi_score = piscore, p_value = value, percentage_A = as.numeric(as.character(indexes[[i]][3])), percentage_B = as.numeric(as.character(indexes[[i]][4])),summary(bed))
unlink(background_dir, recursive = TRUE)
}
values_df = as.data.frame(do.call(rbind,final_values))
values_df = values_df[order(as.numeric(as.character(values_df$jaccard_index)),decreasing = T),]
write.csv(values_df,paste(output_path,"/",gsub("^.*/", "", bed1),"_jaccard_pval.csv",sep=""))
}
#rankBedSimilarity(100, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ControlFiles_0.5_merge/MCM1+SFF_transfac.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ControlFiles_Result_0.5_merge/MCM1+SFF_transfac.csv_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/dir/output_path")
rankBedSimilarity(100, "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/GPSmatch_add_P_Ranking/hg19_formatted_genomebedfile.txt", "/Users/xianggao/Desktop/AmyHighSchool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example/ctrl_Abcam_peaks.bed", "/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/ctrl_Abcam_peaks.bed_jaccard_nt.csv","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/SplitDataBase_mergeregions","/Users/xianggao/Desktop/AmyHighschool/BaoNorthwestern/ctrl_Bao/ctrl_Bao_example_merge_result/")
library(devtools)
devtools::create("GPSmatch")
library(devtools)
library(GPSmatch)
library(GPSmatch)
sigEvl(5,"/Users/xianggao/Desktop/AmyHighschool/NorthwesternBao/RankBindingSimilarity_length/Example/hg19_formatted_genomebedfile.txt","/Users/xianggao/Downloads/ctrl_Bao_example/GSM1645715_p63_ChIP_C_total_peaks.bed","/Users/xianggao/Downloads/GSM1645715_p63_ChIP_C_total_peaks.bed_jaccard_nt.csv", "/Users/xianggao/Downloads/SplitDataBase_mergeregions_copy","/Users/xianggao/Downloads")
install_github("ADotDong/GPSmatch")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("data.table")
library(data.table)
install.packages("tidyverse")
library(tidyverse)
install_github("ADotDong/GPSmatch")
library(GPSmatch)
sigEvl(5,"/Users/xianggao/Desktop/AmyHighschool/NorthwesternBao/RankBindingSimilarity_length/Example/hg19_formatted_genomebedfile.txt","/Users/xianggao/Downloads/ctrl_Bao_example/GSM1645715_p63_ChIP_C_total_peaks.bed","/Users/xianggao/Downloads/GSM1645715_p63_ChIP_C_total_peaks.bed_jaccard_nt.csv", "/Users/xianggao/Downloads/SplitDataBase_mergeregions_copy","/Users/xianggao/Downloads")
library(GPSmatch)
?rankSimilarity
rankSimilarity("/dir/bed1.txt","/dir/database_dir","/dir/output_path")
rankSimilarity("./Example/bed1.txt","./Example/database_folder","/Users/xianggao/Desktop")
sigEvl?
?
.
?sigEvl
sigEvl(100,"./Example/hg19_formatted_genomebedfile.txt","./Example/bed1.txt","/Users/xianggao/Desktop/bed1.txt_jaccard_nt.csv","./Example/database_folder","/Users/xianggao/Desktop")
sigEvl(100,"./Example/hg19_formatted_genomebedfile.txt","./Example/bed1.txt","/Users/xianggao/Desktop/bed1.txt_jaccard_nt.csv","./Example/database_folder","/Users/xianggao/Desktop")
library(GPSmatch)
